using System;
using System.Collections.Generic;

namespace HighlyDivisibleTriangularNumber
{
    class Program
    {
        /*
         * https://projecteuler.net/problem=12
         * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
         * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
         * Let us list the factors of the first seven triangle numbers:
         * 1: 1
         * 3: 1,3
         * 6: 1,2,3,6
         * 10: 1,2,5,10
         * 15: 1,3,5,15
         * 21: 1,3,7,21
         * 28: 1,2,4,7,14,28
         * We can see that 28 is the first triangle number to have over five divisors.
         * What is the value of the first triangle number to have over 
         * five hundred divisors?
         */
        static void Main(string[] args)
        {
            int i = 1, triangle = 0;
            do
            {
                triangle = TriangleNumbers(i);
                var divisors = NumberOfDivisors(triangle);
                if (divisors > 500) break;
                i++;
            } while (true);
            Console.WriteLine("The first triangle number to have over " +
                "five hundred divisors: " + triangle);
            Console.ReadLine();
        }

        static int TriangleNumbers(int number)
        {
            return number * (number + 1) / 2;
        }

        /*
         * an Integer n can be written as  
         * n = p1^(a1)*p2^(a2)*p3^(a3)*...*pk^(ak)
         * p1, p2,..., pk is a prime number
         * The number of divisors of n is 
         * r(n) = (a1+1)*(a2+1)*(a3+1)*...*(ak+1)
        */
        static int NumberOfDivisors(int number)
        {
            int count = 1;
            int temp = 0;

            var powerOfPrimeFactor = new List<int>();

            var firstTwoPrimes = new List<int> { 2, 3 };
            foreach (var prime in firstTwoPrimes)
            {
                while (number % prime == 0)
                {
                    temp++;
                    number /= prime;
                }
                powerOfPrimeFactor.Add(temp);
                temp = 0;
            }

            // all prime numbers bigger than 5 can be written as
            // p = (6*k+1) or p = (6*k-1)
            double sqrtN = Math.Sqrt(number);
            for (int i = 5; i <= sqrtN; i = i + 6)
            {
                var primes = new List<int> { i, i + 2 };
                foreach (var prime in primes)
                {
                    while (number % prime == 0)
                    {
                        temp++;
                        number /= prime;
                    }
                    powerOfPrimeFactor.Add(temp);
                    temp = 0;
                }
            }

            if (number > 2)
            {
                powerOfPrimeFactor.Add(1);
            }

            foreach (var power in powerOfPrimeFactor)
            {
                count *= (power + 1);
            }

            return count;
        }
    }
}
